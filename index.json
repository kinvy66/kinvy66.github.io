[{"categories":["git"],"content":"Typora+PicGo实现笔记图片上传到服务器,上传失败 Typora+PicGo实现笔记中图片上传到服务器，避免Markdown文件拷贝时图片打不开的问题 ","date":"2021-02-23","objectID":"http://Kinvy66.github.io/posts/typora+picgo/:0:0","tags":["Markdown","oss"],"title":"Typora+PicGo实现笔记图片上传到服务器遇到的问题","uri":"http://Kinvy66.github.io/posts/typora+picgo/"},{"categories":["git"],"content":"软件工具 系统：Windows10（macOS请参考 官方文档） Typora（版本：≥ 0.9.9.32 on macOS or 0.9.84 on Windows / Linux） PicGo（版本：≥ 2.2.0 ),在Typora软件下载（文件–\u003e偏好设置–\u003e图像） 阿里云OSS对象，（使用gitee或GitHub也可以） ","date":"2021-02-23","objectID":"http://Kinvy66.github.io/posts/typora+picgo/:1:0","tags":["Markdown","oss"],"title":"Typora+PicGo实现笔记图片上传到服务器遇到的问题","uri":"http://Kinvy66.github.io/posts/typora+picgo/"},{"categories":["git"],"content":"阿里云OSS的购买和使用 购买阿里云OSS，我购买的是40GB一年的（9RMB） 在控制台找到OSS管理，创建Bucket，读写权限设置为公共读，名称按照规定任意写一个，其他设置默认就可以 ","date":"2021-02-23","objectID":"http://Kinvy66.github.io/posts/typora+picgo/:2:0","tags":["Markdown","oss"],"title":"Typora+PicGo实现笔记图片上传到服务器遇到的问题","uri":"http://Kinvy66.github.io/posts/typora+picgo/"},{"categories":["git"],"content":"配置PicGO 打开PicGo配置阿里云OSS 设定KeyId：在阿里云的控制台中，如下图1，没有AccessKey ID 的话可以自己创建一个，然后将 AccessKey ID 复制道KeyId 设定KeySecret：在创建的AccessKey ID中查看Secret，把它复制到设定KeySecret 设定存储空间名：Bucket的名称 确认存储区域：阿里云控制台中，图2 图1：图2： 配置PicGo的端口36677 ","date":"2021-02-23","objectID":"http://Kinvy66.github.io/posts/typora+picgo/:3:0","tags":["Markdown","oss"],"title":"Typora+PicGo实现笔记图片上传到服务器遇到的问题","uri":"http://Kinvy66.github.io/posts/typora+picgo/"},{"categories":["git"],"content":"Typora设置 文件–\u003e偏好设置–\u003e图像， 设置如下图 设置完毕，将图片添加到Markdown笔记中，会自动上传到服务器，图片链接也会转成一个URL 注意：PicGo的端口一定要设置正确，否则图片上传不了 ","date":"2021-02-23","objectID":"http://Kinvy66.github.io/posts/typora+picgo/:4:0","tags":["Markdown","oss"],"title":"Typora+PicGo实现笔记图片上传到服务器遇到的问题","uri":"http://Kinvy66.github.io/posts/typora+picgo/"},{"categories":["Git"],"content":"Git的基本使用 基本命令 git init #初始化当前文件夹作为git库 git clone #复制远程的库 #版本管理 git add #将工作区的文件放入暂存区，后面加文件名或文件 git commit #将暂存区的文件提交到库中，会弹出编辑器提示输入提交信息，适用于提交信息比较多的情况 git commit -m '提交信息' #提交文件到库中，并注明提价信息，适用提交信息比较简短的情况 git rm #删除文件 git rm --cached \u003cfile\u003e... #从暂存区删除文件 #查看信息 git help #帮助 git log #查看日志 git log -n #查看最近n条的日志 git log --pretty=oneline #一行简略的显示日志 git diff #比较不同 git status #查看文件修改状态 git config --list #查看配置信息 #远程协作 git pull git push #git配置 git config --global #使用全局配置文件 git config --system #使用系统的配置文件 git config --local #使用当前仓库的配置文件 git config --global user.name 'naem' #配置全局用户名 git config --global user.email 'email' #配置全局邮箱 #删除文件 git rm filename #删除工作区的文件， #完成了两件事，1.删除一个文件 2.将删除的文件纳入到暂存区 #从已提交的文件中恢复删除的文件 git reset HEAD filename #将待删除的文件从暂存区恢复到工作区 git checkout -- filename #把之前的修改丢弃，用 rm 删除的文件只要这个命令就可以恢复 #文件重命名 git mv oldname newname #执行这个命令后文件就会放入到暂存区，和mv的区别与 git rm和rm的区别一样 #修改上次提交的消息 git commit --amend -m '修改的消息内容' #.gitignore文件 #在目录下添加一个.gitignore文件 #文件内容就是需要忽略文件的文件名 #git上传是就会忽略这些文件 #文件支持通配符和正则表达式 分支相关命令 git branch #查看当前所有的分支 git branch new_branch #创建新的分支（new_branch） #创建时会把当前分支的文件复制到新分支 git checkout new_branch #切换到new_branc分支 git checkout - #切换到之前的分支 git branc -m old_branch new_branch #更改分支的名字 #在新的分支上创建新文件，然后提交到git中 #在切换到分支中是不会有刚刚创建的文件的 git branch -d new_branch #删除new_branch分支，没有合并分支无法删除 #使用下面的命令可以强制删除 git branch -D new_branch git checkout -b new_branch #创建new_branch分支，并切换到新分支 git merge new_branch #将new_branch分支的修改内容合并到当前所在的分支 git branch -v #查看当前分支最近一次提交的信息 git远程操作 push 推送 pull 拉取，同时执行合并merge pull == fetch + merge #推送到GitHub #git remote 远程 #origin,表示用origin代替后面的地址 git remote add origin https://github.com/Kinvy66/NanoClock.git git push -u origin master #将本地的推送到远程，同时本地的master和远程的关联 #执行上述操作后，再次提交 git push git remote show #列出远程仓库的别名 git remote show origin #列出origin的详细信息 #ssh which ssh-keygen #查看keygen的目录 ssh-keygen #生成keygen #执行步骤 git remote add origin ssh地址 git push -u origin master ssh-keygen #将公钥配置到GitHub上 git push -u origin master 其他 使用 git add 后出现下面警告 warning: LF will be replaced by CRLF in text.txt. The file will have its original line endings in your working directory 警告：在xxx.xx文件中LF将被CRLF替换。 在你的工作区（working directory）里，这个文件将会保持它原本的换行符。（line ending:行尾，换行） CR：Carriage Return 回车\\r LF：Line Feed 换行 \\n CRLF：Carriage Return Line Feed 回车换行\\r\\n 出现原因： 这是因为在Windows中的换行符为CRLF，而在Linux中的换行符为LF。在git创建的项目中换行符为LF，而gits是linux环境，Git自作聪明的“换行符自动转换”功能会自动进行转换，然后系统会提示LF将被转换为CRLF。 解决的办法很简单，禁止git的自动转换即可。 ","date":"2021-02-21","objectID":"http://Kinvy66.github.io/posts/git-user-manual/:1:0","tags":["Git"],"title":"Git 常用命令","uri":"http://Kinvy66.github.io/posts/git-user-manual/"}]